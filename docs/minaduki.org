#+title: Minaduki

* Introduction

Minaduki is my fork of Org-roam v1.

It has support for reading Obsidian vaults.

* Tags library

In the interest of keeping a controlled library of tags, the minaduki-tags module is made to help with that.

Tags are kept in the vault-specific =minaduki:tags-file=. Headings in that file who have no subheadings are treated as tag definitions; this helps with explaining nuances of tags that are often single-word.

Programmatic API:

- minaduki-tags-library: return tags from the current tag library

Commands:

- minaduki-org-set-heading-tags: like =org-set-tags= but using the tag library for completion

* File formats

Minaduki has support for notes written in Org and Markdown. I hope to add support for more formats (reStructuredText, AsciiDoc, etc.) in the future.

** Markdown

Minaduki cares about the following kinds of Markdown syntax:

- Normal (=[description](path)=) links are tracked for backlinks
- Wiki links (in the style of =[[path]]= or =[[path|description]]=) are also tracked; they are treated like Obsidian links
- YAML front matter, delimited with =---=
- Heading IDs are specified as =# heading {#ID}=, ie. the X in a trailing ={#X}= in a heading.
- The main title is either the =title= key in the YAML front matter or first heading; if neither of those are present, the file name is used.

** Org

Minaduki is a fork of Org-roam v1, so many Org concepts remain unchanged.

Instead of =org-link-abbrev-alist=, use the vaults system to add extra vaults of notes. This allows them to also be used in other formats — Minaduki will set up =org-link-abbrev-alist= based on the specified vaults.

You can also use an Org file as a bibliography; see [[id:574665c1-24cd-4553-ae26-40354591f050][Minaduki's Org-based bibliography file format]]. In short, in files listed in =minaduki-lit/bibliography=, headings with a =CUSTOM_ID= are treated as literature entries, with their properties copied straight into the entry (after some processing).

* Concepts
** minaduki-mode

=minaduki-mode= is a global minor mode. When a buffer is visiting a file tracked by Minaduki, =minaduki-local-mode= will be enabled, which sets up local hooks to update the backlinks buffer, update the cache after save, etc.

In general, do not enable =minaduki-local-mode= manually. It's only really a minor mode as an elegant way to define key bindings local to files tracked by Minaduki.

** Links

In Org, links with a non-file non-url target like =[[javascript]]= are normally for same-file targets and fuzzy links. In Minaduki, this type of links have been repurposed to act as wiki links. This only applies to files inside Minaduki vaults.

To access the native Org same-file target linking / fuzzy text search linking, use the =f:= link type added by Minaduki. These should act just the same. In other words:

- =[[f:hello]]= in Minaduki will do what =[[hello]]= does outside Minaduki
- =[[hello]]= in Minaduki (in Org) is a wiki link that opens the file / note named “hello”

** Templates

The templating system is a mess right now.

I didn't like how org-roam-capture specifies templates in a variable, so I tried to write =minaduki-templates.el=, but it's still incomplete.

Goals:

- Templates stored as files in =<vault>/templates=
- Addressed by file name
  - todo: how to resolve multiple formats (eg. =daily.org= and =daily.md=)?
- Command to create notes based on a template
- Templates can specify properties
- Can be made independent of the rest of Minaduki

** Vaults

This is functioning as a planning document.

A vault represents a path full of notes.

Vaults are for clearly separated stuff. Note libraries of different people should be in different vaults. Fiction writing projects should be in different vaults.

To prevent scope creep you /cannot/ link to different vaults. Or, rather, there is no special mechanism to do so: file links of course still work but they are fragile.

Links to resource libraries will be handled with an extention to =org-link-abbrev-alist= that extends it to eg. Markdown.

There is a default vault. This vault represents the main notes collection of the user.

Subdirectories containing ~minaduki-nested-vault-root-files~ are considered /nested vaults/. Right now this is only used to implement Obsidian's default /shortest link when possible/ links.

- [ ] Markdown: following adheres to minaduki/vaults
- [ ] Markdown: extracting adheres to minaduki/vaults
- [ ] Markdown: insertion adheres to minaduki/vaults
** Note types

=minaduki-open= does not distinguish between different types of notes, but categorizing notes into different types allows Minaduki to offer commands to quickly create them.

*** Fleeting notes

A /fleeting note/ is one that isn't associated with any particular concept.

A /daily note/ is a fleeting note named after the /day/ it was created, instead of the moment.

- Command: =minaduki/new-fleeting-note=

  This command creates a fleeting note under =minaduki/diary-directory=, naming it using a timestamp marking the moment it was created (eg. ~20210102T030405+0800~).

- Command: =minaduki/new-daily-note=

  This command creates a daily note under =minaduki/diary-directory=, naming it using the day it was created (eg. ~20210102~). =org-extend-today-until= is honored.

- Command: =minaduki/open-diary-entry=

  Open (or create) a file associated with today. With a universal argument, this will prompt to select another date instead of today. =org-extend-today-until= is honored.

  A file is associated with a day by:

  - if it is a file in =minaduki/diary-directory=, then by its file name starting with the date (in YYYYMMDD)
  - for all files, via the properties =modified=, =created=, and =date=, in that order

*** Concept notes

A /concept note/ is associated with some concept that isn't a moment in time.

- Command: =minaduki/new-concept-note=

  This command creates a new concept note at the root of the main vault.

*** Literature notes

A /literature note/ is one that is associated with a literature entry. A literature entry represents something like a video, an article, a book, or /anything/, and allows storing some metadata along with notes about the thing itself. See [[*Bibliography management]] for details.

- Command: =minaduki:new-literature-note-from-url=

  Ask for a URL, then automatically create a literature entry for it along with its associated literature note.

** Keywords
*** How keywords are specified

In Markdown, keywords are specified in YAML front matter. There is no special treatment for plural noun keys — yes, “aliases” is a better key for a list of aliases, but that complicates things somewhat as the same keywords have to work in Org.

#+begin_src yaml
---
title: Hello world
# Specified as an inline list
key: ["key1", "https://example.com/key2"]
---
#+end_src

In Org, keywords are specified using =#+KEYWORD: VALUE=. Multiple occurrences of the same key specifies multiple values, not concatenated into one value (this is unlike how Org itself handles =TITLE= while exporting).

*** Keyword reference
- title :: the main title of the file.
- created :: the timestamp (in =YYYY-MM-DDThh:mm:ssZ=) when the file was first created
- alias :: an alternative title.
- key :: a unique identifier for this file. Could be a link or any other ID. This is used to associate bibliography items with note files, as well as for citation backlinks.
- (to be renamed) =roam_tags= :: a list of tags.

** Bibliography management

Minaduki manages bibliography entries in dedicated bibliography files. The entries are called /literature entries/ or sometimes just /lit-entries/, and the files they are stored in are called /bibliography files/.

Bibliography files can be written in three formats: BibTeX, CSL-JSON, and a custom Org-based format.

Set bibliography files with =minaduki-lit/bibliography=.

*** Browsing literature entries
Use =minaduki/literature-entries= to browse all literature entries. After you select an entry, you can:

- insert a citation to the entry
- copy its key
- edit its associated note (the one that has a =roam_key= equal to this entry)
- insert a link to its associated note
- show the definition of the entry in the bibliography, or
- open its associated URL, DOI, or PDF.

This is essentially my reimplementation of =bibtex-completion=.

*** Org-cite support
Org-cite is supported: instead of using =org-cite-global-bibliography= you can just use =minaduki-lit/bibliography= and =org-cite-insert= will offer completions from the right place. This is accomplished with a custom Org-cite processor.

Reading from Org-cite's local bibliography is not yet supported though.

*** Minaduki's Org-based bibliography file format
:PROPERTIES:
:ID:       574665c1-24cd-4553-ae26-40354591f050
:END:

Every heading in a bibliography file with a =CUSTOM_ID= property is saved as a literature entry, with the value being the citekey.

Headings in bibliography files that have a =URL= property are also saved as literature entries. The citekey is still the value of =CUSTOM_ID= if it is present, but if it isn't, the URL will be used as the citekey. This does mean that citekeys might not be filename-safe.

Each entry has a (possibly absent) list of =sources=: file paths, URLs, or DOIs that the entry describes. This is used by =minaduki/visit-source= to allow quick access to the referenced resource. This list is assembled from the =sources=, =url=, =doi=, and =link= properties.

The tags on the heading are included in the literature entry as well.

The Org =CATEGORY= of the heading is used as the type of the literature entry. This is analogous to the type of a BibTeX entry.

#+begin_src bibtex
@Comment  this-----vvvv
                  @book{abc}
#+end_src


Every other property is passed into the entry unchanged.

The =CUSTOM_ID= key can be customized: set =minaduki-lit/key-prop= to something else to make Minaduki use that property instead of =CUSTOM_ID=.

#+begin_src org
,* ロウワー
:PROPERTIES:
:url: https://www.nicovideo.jp/watch/sm39608927
:date:   2021-11-11
:author:   ぬゆり
:custom_id: ぬゆり20211111
:END:

,* 運命
:PROPERTIES:
:url:  https://www.nicovideo.jp/watch/sm39251865
:date:   2021-08-28
:author:   はるまきごはん and 煮ル果実
:custom_id: はるまきごはんand煮ル果実20210828
:END:
#+end_src


* Tutorials
** Browsing notes

Use =minaduki-open= to see a list of indexed notes. Select one to open.

If [[https://github.com/minad/marginalia/][Marginalia]] is installed, you'll see the file name listed in the completion as well.

Press RET to visit the note.

Headline notes are indicated with a leading star (regardless of heading level or whether it's Markdown or Org). Headline notes are headlines that have an =ID= property.

** Obsidian support

Obsidian links are supported. You can follow them, and they are tracked by backlinks.

In an Obsidian vault, the file name is used as the main title.

Try cloning a public Obsidian vault like [[https://github.com/sw-yx/brain][sw-yx/brain]] or [[https://help.obsidian.md/][Obsidian Help]]. Backlinks and title search should just work.
